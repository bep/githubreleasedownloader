package githubreleasedownloader

import (
	"archive/tar"
	"archive/zip"
	"compress/gzip"
	"context"
	"crypto/sha256"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path/filepath"
	"runtime"
	"sort"
	"strings"
	"sync"
	"time"

	"github.com/bep/workers"
)

const tokenEnvVar = "GITHUB_TOKEN"

func New() (*Client, error) {
	token := os.Getenv(tokenEnvVar)
	if token == "" {
		return nil, fmt.Errorf("no token found in %s", tokenEnvVar)
	}

	return &Client{
		client: &http.Client{
			Timeout: 60 * time.Second,
		},
		auth: "Bearer " + token,
	}, nil
}

type Client struct {
	client *http.Client
	auth   string
}

// GetRelease returns the release for the given owner, repo and tag.
// Note that this method will download the assets to calculate their sha256 checksums,
// so it can be slow for large assets etc.
func (c *Client) GetRelease(owner, repo, tag string) (Release, error) {
	api := "https://api.github.com/repos/" + owner + "/" + repo + "/releases/tags/" + tag
	resp, err := c.get(api)
	if err != nil {
		return Release{}, err
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		return Release{}, fmt.Errorf("unexpected status code: %s", resp.Status)
	}

	var ri releaseInfo
	if err := json.NewDecoder(resp.Body).Decode(&ri); err != nil {
		return Release{}, err
	}

	release := Release{
		TagName:         ri.TagName,
		TargetCommitish: ri.TargetCommitish,
		Name:            ri.Name,
		Draft:           ri.Draft,
		Prerelease:      ri.Prerelease,
		CreatedAt:       ri.CreatedAt,
		PublishedAt:     ri.PublishedAt,
	}

	// Speed up the sha256 calculation by doing it in parallel.
	var assetsMu sync.Mutex
	w := workers.New(runtime.NumCPU())
	r, _ := w.Start(context.Background())

	for _, a := range ri.Assets {
		a := a

		r.Run(func() error {
			var sha256 string

			resp, err := c.get(a.BrowserDownloadURL)
			if err != nil {
				return err
			}
			defer resp.Body.Close()
			if resp.StatusCode != http.StatusOK {
				return fmt.Errorf("unexpected status code: %s", resp.Status)
			}
			sha256, err = sha256sum(resp.Body)
			if err != nil {
				return err
			}
			assetsMu.Lock()
			release.Assets = append(release.Assets, Asset{
				Name:        a.Name,
				URL:         a.BrowserDownloadURL,
				Sha256:      sha256,
				ContentType: a.ContentType,
				Size:        a.Size,
			})
			assetsMu.Unlock()
			return nil
		})
	}

	if err := r.Wait(); err != nil {
		return Release{}, err
	}

	sort.Slice(release.Assets, func(i, j int) bool {
		return release.Assets[i].Name < release.Assets[j].Name
	})

	return release, nil
}

func sha256sum(r io.Reader) (string, error) {
	h := sha256.New()
	if _, err := io.Copy(h, r); err != nil {
		return "", err
	}
	return hex.EncodeToString(h.Sum(nil)), nil
}

func (c *Client) get(url string) (*http.Response, error) {
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Authorization", c.auth)
	return c.client.Do(req)
}

// Release represents a GitHub release.
type Release struct {
	TagName         string    `json:"tag_name"`
	TargetCommitish string    `json:"target_commitish"`
	Name            string    `json:"name"`
	Draft           bool      `json:"draft"`
	Prerelease      bool      `json:"prerelease"`
	CreatedAt       time.Time `json:"created_at"`
	PublishedAt     time.Time `json:"published_at"`
	Assets          Assets    `json:"assets"`
}

// Assets is a slice of Asset.
type Assets []Asset

// Filter returns a new Assets slice containing only the assets for which the
// given function returns true.
func (a Assets) Filter(f func(Asset) bool) Assets {
	var filtered Assets
	for _, asset := range a {
		if f(asset) {
			filtered = append(filtered, asset)
		}
	}
	return filtered
}

// Asset represents a GitHub release asset.
type Asset struct {
	// Name is the name of the asset.
	Name string `json:"name"`
	// URL is the URL to download the asset.
	URL string `json:"url"`
	// Sha256 is the sha256 checksum of the asset.
	Sha256 string `json:"sha256"`
	// ContentType is the content type of the asset.
	ContentType string `json:"content_type"`
	// Size is the size of the asset in bytes.
	Size int `json:"size"`
}

// Generated by https://mholt.github.io/json-to-go/
type releaseInfo struct {
	URL       string `json:"url"`
	AssetsURL string `json:"assets_url"`
	UploadURL string `json:"upload_url"`
	HTMLURL   string `json:"html_url"`
	ID        int    `json:"id"`
	Author    struct {
		Login             string `json:"login"`
		ID                int    `json:"id"`
		NodeID            string `json:"node_id"`
		AvatarURL         string `json:"avatar_url"`
		GravatarID        string `json:"gravatar_id"`
		URL               string `json:"url"`
		HTMLURL           string `json:"html_url"`
		FollowersURL      string `json:"followers_url"`
		FollowingURL      string `json:"following_url"`
		GistsURL          string `json:"gists_url"`
		StarredURL        string `json:"starred_url"`
		SubscriptionsURL  string `json:"subscriptions_url"`
		OrganizationsURL  string `json:"organizations_url"`
		ReposURL          string `json:"repos_url"`
		EventsURL         string `json:"events_url"`
		ReceivedEventsURL string `json:"received_events_url"`
		Type              string `json:"type"`
		SiteAdmin         bool   `json:"site_admin"`
	} `json:"author"`
	NodeID          string    `json:"node_id"`
	TagName         string    `json:"tag_name"`
	TargetCommitish string    `json:"target_commitish"`
	Name            string    `json:"name"`
	Draft           bool      `json:"draft"`
	Prerelease      bool      `json:"prerelease"`
	CreatedAt       time.Time `json:"created_at"`
	PublishedAt     time.Time `json:"published_at"`
	Assets          []struct {
		URL      string `json:"url"`
		ID       int    `json:"id"`
		NodeID   string `json:"node_id"`
		Name     string `json:"name"`
		Label    string `json:"label"`
		Uploader struct {
			Login             string `json:"login"`
			ID                int    `json:"id"`
			NodeID            string `json:"node_id"`
			AvatarURL         string `json:"avatar_url"`
			GravatarID        string `json:"gravatar_id"`
			URL               string `json:"url"`
			HTMLURL           string `json:"html_url"`
			FollowersURL      string `json:"followers_url"`
			FollowingURL      string `json:"following_url"`
			GistsURL          string `json:"gists_url"`
			StarredURL        string `json:"starred_url"`
			SubscriptionsURL  string `json:"subscriptions_url"`
			OrganizationsURL  string `json:"organizations_url"`
			ReposURL          string `json:"repos_url"`
			EventsURL         string `json:"events_url"`
			ReceivedEventsURL string `json:"received_events_url"`
			Type              string `json:"type"`
			SiteAdmin         bool   `json:"site_admin"`
		} `json:"uploader"`
		ContentType        string    `json:"content_type"`
		State              string    `json:"state"`
		Size               int       `json:"size"`
		DownloadCount      int       `json:"download_count"`
		CreatedAt          time.Time `json:"created_at"`
		UpdatedAt          time.Time `json:"updated_at"`
		BrowserDownloadURL string    `json:"browser_download_url"`
	} `json:"assets"`
	TarballURL string `json:"tarball_url"`
	ZipballURL string `json:"zipball_url"`
	Body       string `json:"body"`
	Reactions  struct {
		URL        string `json:"url"`
		TotalCount int    `json:"total_count"`
		Num1       int    `json:"+1"`
		Num10      int    `json:"-1"`
		Laugh      int    `json:"laugh"`
		Hooray     int    `json:"hooray"`
		Confused   int    `json:"confused"`
		Heart      int    `json:"heart"`
		Rocket     int    `json:"rocket"`
		Eyes       int    `json:"eyes"`
	} `json:"reactions"`
	MentionsCount int `json:"mentions_count"`
}

// DownloadAndExtractAssetToDir downloads the given asset to the given directory.
// If the SHA256 checksum of the downloaded file does not match the one stored
// in the asset, an error is returned.
func DownloadAndExtractAssetToDir(asset Asset, dir string) error {
	resp, err := http.Get(asset.URL)
	if err != nil {
		return err
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("unexpected status code %d", resp.StatusCode)
	}
	// Write archive to a temporary file.
	tmp, err := ioutil.TempFile("", "*"+asset.Name)
	if err != nil {
		return err
	}
	defer tmp.Close()
	defer os.Remove(tmp.Name())

	h := sha256.New()
	w := io.MultiWriter(tmp, h)

	_, err = io.Copy(w, resp.Body)
	if err != nil {
		return err
	}

	// Compare the sha256 checksum of the downloaded file with the one stored.

	if hex.EncodeToString(h.Sum(nil)) != asset.Sha256 {
		return fmt.Errorf("sha256 checksum mismatch")
	}

	// Extract archive.
	return extractArchive(tmp.Name(), dir)

}

// extractArchive extracts the given archive to the given directory.
func extractArchive(archive, dir string) error {
	if strings.HasSuffix(archive, ".zip") {
		return extractZip(archive, dir)
	}
	if strings.HasSuffix(archive, ".tar.gz") || strings.HasSuffix(archive, ".tgz") {
		return extractTarGz(archive, dir)
	}
	return fmt.Errorf("unsupported archive format: %s", archive)

}

func extractZip(archiveFilename, dir string) error {
	archive, err := zip.OpenReader(archiveFilename)
	if err != nil {
		return err
	}
	for _, f := range archive.File {
		filename := filepath.Join(dir, f.Name)
		if f.FileInfo().IsDir() {
			if err := os.MkdirAll(filename, os.ModePerm); err != nil {
				return err
			}
			continue
		}
		if err := os.MkdirAll(filepath.Dir(filename), os.ModePerm); err != nil {
			return err
		}
		if err := func() error {
			dst, err := os.Create(filename)
			if err != nil {
				return err
			}
			src, err := f.Open()
			if err != nil {
				return err
			}
			defer src.Close()
			defer dst.Close()
			_, err = io.Copy(dst, src)
			return err

		}(); err != nil {
			return err
		}

	}
	return nil
}

func extractTarGz(filename, dir string) error {
	f, err := os.Open(filename)
	if err != nil {
		return err
	}
	defer f.Close()
	gzr, err := gzip.NewReader(f)
	if err != nil {
		return err
	}
	defer gzr.Close()
	tr := tar.NewReader(gzr)
	for {
		hdr, err := tr.Next()
		if err == io.EOF {
			break
		}
		if err != nil {
			return err
		}
		filename := filepath.Join(dir, hdr.Name)
		switch hdr.Typeflag {
		case tar.TypeDir:
			if err := os.MkdirAll(filename, os.ModePerm); err != nil {
				return err
			}
		case tar.TypeReg:
			if err := os.MkdirAll(filepath.Dir(filename), os.ModePerm); err != nil {
				return err
			}
			dst, err := os.OpenFile(filename, os.O_CREATE|os.O_RDWR, os.FileMode(hdr.Mode))
			if err != nil {
				return err
			}
			defer dst.Close()
			if _, err := io.Copy(dst, tr); err != nil {
				return err
			}
		}
	}

	return nil
}
